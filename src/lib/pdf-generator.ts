import {
  extraEdgeSuggestionsSchema,
  ResultSchema,
} from '@/schemas/ResultSchema';
import jsPDF from 'jspdf';
import z from 'zod';

export const downloadPDF = async (results: z.infer<typeof ResultSchema>) => {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.width;
  const margin = 20;
  let yPos = 30;

  // Title
  pdf.setFontSize(24);
  pdf.setTextColor(59, 130, 246);
  pdf.text('SkillSense Resume Analysis Report', margin, yPos);

  yPos += 20;
  pdf.setFontSize(14);
  pdf.setTextColor(0, 0, 0);
  pdf.text(`Generated: ${new Date().toLocaleDateString()}`, margin, yPos);

  yPos += 30;

  // Match Score
  pdf.setFontSize(18);
  pdf.setTextColor(34, 197, 94);
  pdf.text(`Match Score: ${results.matchScore}%`, margin, yPos);

  yPos += 20;
  pdf.setFontSize(12);
  pdf.setTextColor(0, 0, 0);
  const scoreComment =
    results.matchScore >= 80
      ? 'Excellent fit!'
      : 'Good! But you can still improve your fit.';
  pdf.text(scoreComment, margin, yPos);

  yPos += 30;

  // Skills Matched
  if (results.skillsMatched.length > 0) {
    pdf.setFontSize(16);
    pdf.setTextColor(34, 197, 94);
    pdf.text('‚úì Skills Detected:', margin, yPos);
    yPos += 15;

    pdf.setFontSize(11);
    pdf.setTextColor(0, 0, 0);
    const skillsText = results.skillsMatched.join(', ');
    const skillsLines = pdf.splitTextToSize(skillsText, pageWidth - 2 * margin);
    pdf.text(skillsLines, margin, yPos);
    yPos += skillsLines.length * 6 + 15;
  }

  // Missing Skills
  if (results.missingSkills.length > 0) {
    pdf.setFontSize(16);
    pdf.setTextColor(239, 68, 68);
    pdf.text('‚úó Skills Missing:', margin, yPos);
    yPos += 15;

    pdf.setFontSize(11);
    pdf.setTextColor(0, 0, 0);
    const missingSkillsText = results.missingSkills.join(', ');
    const missingSkillsLines = pdf.splitTextToSize(
      missingSkillsText,
      pageWidth - 2 * margin,
    );
    pdf.text(missingSkillsLines, margin, yPos);
    yPos += missingSkillsLines.length * 6 + 20;
  }

  // AI Recommendations
  if (results.suggestions.length > 0) {
    pdf.setFontSize(16);
    pdf.setTextColor(59, 130, 246);
    pdf.text('üí° AI Recommendations:', margin, yPos);
    yPos += 15;

    pdf.setFontSize(11);
    pdf.setTextColor(0, 0, 0);
    results.suggestions.forEach((suggestion: string, index: number) => {
      if (yPos > 250) {
        pdf.addPage();
        yPos = 30;
      }
      const lines = pdf.splitTextToSize(
        `${index + 1}. ${suggestion}`,
        pageWidth - 2 * margin,
      );
      pdf.text(lines, margin, yPos);
      yPos += lines.length * 6 + 8;
    });
    yPos += 10;
  }

  // Stand-out suggestions
  if (results.extraEdgeSuggestions.length > 0) {
    pdf.setFontSize(16);
    pdf.setTextColor(245, 158, 11);
    pdf.text('‚≠ê Make Your Resume Stand Out:', margin, yPos);
    yPos += 15;

    pdf.setFontSize(11);
    pdf.setTextColor(0, 0, 0);
    results.extraEdgeSuggestions.forEach(
      (tip: z.infer<typeof extraEdgeSuggestionsSchema>, index: number) => {
        if (yPos > 240) {
          pdf.addPage();
          yPos = 30;
        }
        const text = `${index + 1}. ${tip.title}: ${tip.description}`;
        const lines = pdf.splitTextToSize(text, pageWidth - 2 * margin);
        pdf.text(lines, margin, yPos);
        yPos += lines.length * 6 + 8;
      },
    );
  }

  // Footer
  pdf.setFontSize(10);
  pdf.setTextColor(128, 128, 128);
  pdf.text(
    'Generated by SkillSense - AI-Powered Resume Analysis',
    margin,
    pdf.internal.pageSize.height - 20,
  );

  // Download
  pdf.save(
    `SkillSense_Resume_Analysis_${new Date().toISOString().split('T')[0]}.pdf`,
  );
};
